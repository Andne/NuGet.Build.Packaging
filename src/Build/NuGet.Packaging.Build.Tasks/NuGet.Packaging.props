<!--
***********************************************************************************************
Microsoft.NuGet.Packaging.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<!-- Default mapping between %(PackageFile.Kind) metadata and package folders inside .nupkg -->
		<!-- PackageFolder should map to a supported folder as defined in PackagingConstants.Folders -->
		<!-- The exceptions are Dependency, FrameworkReference and AssemblyReference -->
		<PackageFileKind Include="Library">
			<PackageFolder>lib</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Symbols">
			<PackageFolder>lib</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Doc">
			<PackageFolder>lib</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Content">
			<!-- Plain "content" is deprecated as of NuGet v3+ -->
			<PackageFolder>contentFiles</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="None">
			<!-- Causes the file to end up in the package root dir -->
			<PackageFolder></PackageFolder>
		</PackageFileKind>

		<PackageFileKind Include="Build">
			<PackageFolder>build</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Tools">
			<PackageFolder>tools</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="ContentFiles">
			<PackageFolder>contentFiles</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Native">
			<PackageFolder>native</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Runtimes">
			<PackageFolder>runtimes</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Ref">
			<PackageFolder>ref</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Analyzers">
			<PackageFolder>analyzers</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Source">
			<PackageFolder>source</PackageFolder>
		</PackageFileKind>

		<!-- Special-case singular form of the built-in plural form folders. -->
		<PackageFileKind Include="Tools">
			<PackageFolder>tools</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Tool">
			<PackageFolder>tools</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Runtime">
			<PackageFolder>runtimes</PackageFolder>
		</PackageFileKind>
		<PackageFileKind Include="Analyzer">
			<PackageFolder>analyzers</PackageFolder>
		</PackageFileKind>

		<!-- For unknown Kind we apply the heuristics of turning the metadata value into pascalCase 
             and using that as the package folder (i.e. 'Workbooks' -> 'workbooks') -->

		<!-- Finally, specially treated items that we include here for completeness and documentation -->

		<!-- PackageReference items end up as Dependency -->
		<PackageFileKind Include="Dependency">
			<PackageFolder></PackageFolder>
		</PackageFileKind>
		<!-- Project references that build packages also end up as package dependencies -->
		<PackageFileKind Include="Metadata">
			<PackageFolder></PackageFolder>
		</PackageFileKind>

		<!-- Platform targets could turn @(ReferencePath) with ResolvedFrom={TargetFrameworkDirectory} to FrameworkReference, for example -->
		<PackageFileKind Include="FrameworkReference">
			<PackageFolder></PackageFolder>
		</PackageFileKind>

		<!-- Platform targets cound turn other @(ReferencePath) that are resolved otherwise (i.e. {RawFile}) into AssemblyReference, for example -->
		<PackageFileKind Include="AssemblyReference">
			<PackageFolder></PackageFolder>
		</PackageFileKind>

	</ItemGroup>

</Project>
